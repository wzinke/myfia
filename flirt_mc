#!/bin/bash
#
# use flirt for motion correction

Usage() {
cat << EOF

    Usage: flirt_mc <infile> [options]

           This function uses flirt for motion correction. Each volume is co-registered to a reference scan.

    OPTIONS:
            -out        basename for the data output
            -ref        reference for coregistration (use a number or a file)
            -dof        degrees of freedom (default: 12 parameter affine transformation)
                        (numbers of transformation parameter, i.e. 3, 6, 7, 9 or 12)
            -rot_tol    angle for all 3 axis that is used for the search (-rot_tol:rot_tol, default: 10)
            -cost       cost function (corratio,mutualinfo,normcorr,normmi,leastsq)
                        recommended: <corratio> for intra- and intermodal (default)
            -inmask     weighting mask for the input image, unless specified no weightning will be done
                        (use 'thr' or 'bet' as option)
            -refmask    weighting mask for the reference image, unless specified no weightning will be done
            -ip         interpolation (trilinear,nearestneighbour,sinc,spline); default: trilinear
            -sm         use smoothing with fwhm given here prior coregistration
            -final      coregister mean image of motion corrected series
            -nIter      Number of iterations for coregistration (default: 1)
            -betpar     Parameter used for the bet call (default: "-r 30 -f 0.4")
            -rsmpl      resamples volumes to the size of the reference image
            -tmp        temporary directory where single 3D files are saved
            -keep       don't delete temporary files when finished

            ###########################################################
            ##   (c) wolf zinke (2009) - part of the MaFIA toolbox   ##
            ##         > MAcaque Functional Image Analysis <         ##
            ##            Licensed under the MIT license             ##
            ###########################################################

EOF
    exit 1
}

if [ $# -lt 1 ]; then
    Usage
else
    flnm=`remove_ext $1`;
    shift
fi

# TODO: This script needs some serious rework to get rid of unnecessary things
#       and to optimize the core functionality
# BUG: -rsmpl_hdr seems to cause problems (useqform issues?)

#----------------------------------------------------------------------#
# define default parameter
mask_thr=15
outnm=${flnm}_mc
dof=12
rot_tol=6
do_inmask=0
do_final=0
tmpdir=`tmpnam tmpMC`
rm $tmpdir
keep_tmp=0
costfun="corratio"
ref=0
ip="spline"
sincwd=5
do_rsmpl=0
sm_fwhm=0
do_hdr=0
numiter=1
betpar="-r 30 -f 0.4"
searchtol="-nosearch"

#----------------------------------------------------------------------#
# get options
while [ $# -gt 0 ] ;
do
    case $1 in
        -out)   outnm=$2
                shift 2
                ;;
        -dof)   dof=$2
                shift 2
                ;;
        -ref)   ref=$(remove_ext $2)
                shift 2
                ;;
    -refmask)   refmask=$2
                shift 2
                ;;
     -inmask)   inmask=$2
                do_inmask=1
                shift 2
                ;;
       -cost)   costfun=$2
                shift 2
                ;;
    -rot_tol)   searchtol="-searchrx -$2 $2 -searchry  -$2 $2 -searchrz  -$2 $2"
                shift 2
                ;;
      -rsmpl)   do_rsmpl=1
                shift
                ;;
         -ip)   ip=$2
                shift 2
                ;;
         -sm)   sm_fwhm=$2
                shift 2
                ;;
      -final)   do_final=1
                shift
                ;;
      -nIter)   numiter=$2
                shift 2
                ;;
     -betpar)   betpar="$2"
                shift 2
                ;;
        -tmp)   tmpdir=$2
                shift 2
                ;;
       -keep)   keep_tmp=1
                shift
                ;;
          -*)   echo "Wrong option: <$1>"
                echo ""
                Usage
                ;;
           *)   break
                ;;
    esac
done


#----------------------------------------------------------------------#
# check whether directory allready exists
if [ -d $tmpdir ]
then
   rm -r $tmpdir    # delete whole directory
fi

mkdir $tmpdir;

#----------------------------------------------------------------------#
# split 4D into series of 3D volumes
fslsplit $flnm $tmpdir/vol_ -t

#----------------------------------------------------------------------#
# Get list of existing volumes
vol_lst=`ls -1 $tmpdir/vol_*`

#----------------------------------------------------------------------#
# create the directory with the transformation matrices
if [ -d ${outnm}.mat ]
then
   rm -r ${outnm}.mat    # delete whole directory
fi

mkdir ${outnm}.mat

#----------------------------------------------------------------------#
# get the reference image
reffl=${tmpdir}/ref
refweight=${tmpdir}/refweight
if [ $(imtest $ref) -eq 1 ]
then
    echo "Using reference file: $ref"
    imcp $ref $reffl              # copy reference into temp directory
else
    echo "Using reference volume # $ref"

    fslroi $flnm $reffl $ref 1   # extract reference volume
    if [ $sm_fwhm != 0 ]
    then
        krnl=`fwhm2sigma $sm_fwhm`
        fslmaths $reffl -kernel $krnl -fmeanu $reffl -odt float
    fi
fi

# weightning mask
if [ $(imtest $refmask) -eq 1 ]
then
        imcp $refmask $refweight
        imcp $refmask ${tmpdir}/refmask
elseif [ $(imtest ${reffl}_mask) -eq 1 ]
        imcp ${reffl}_mask $refweight
        imcp ${reffl}_mask ${tmpdir}/refmask
else
    case $refmask in
        thr)    fslmaths $reffl -thrp $mask_thr $refweight
                ;;
        bet)    bet $reffl ${reffl}_bet -o -m $betpar -R
                immv ${reffl}_bet_mask $refweight
                ;;
            *)    echo "ERROR: Unknown option <$refmask> for reference weightning"
                exit 1
                ;;
    esac
    imcp $refweight ${tmpdir}/refmask
fi

if [ $(imtest ${tmpdir}/refmask) -eq 1 ]
then
    do_refmask=1
else
    do_refmask=0
fi

#----------------------------------------------------------------------#
# prepare the arguments for the flirt call
inweight=${tmpdir}/inmask
flirt_fun_par=""

flirt_fun_par="$flirt_fun_par -usesqform -cost $costfun -searchcost $costfun $searchtol"
flirt_fun_par="$flirt_fun_par -dof $dof -coarsesearch 30 -finesearch 6"

if [ $do_refmask -eq 1 ]
then
    flirt_fun_par="$flirt_fun_par -refweight $refweight"
fi


#----------------------------------------------------------------------#
# prepare the arguments for the image transformation
trans_fun_par=""
trans_fun_par="$trans_fun_par -interp $ip"

if [ $ip == "sinc" ]
then
    trans_fun_par="$trans_fun_par -sincwidth $sincwd -sincwindow hanning"
fi

#----------------------------------------------------------------------#
# prepare volumes

echo "preparing volumes"

for curr_vol in $vol_lst
do
    init_par=""

    cnt=$(($cnt+1))
    echo -n "$cnt "

    curr_vol=`remove_ext ${curr_vol}`
    curr_vol=`basename ${curr_vol}`

    if [ $sm_fwhm != 0 ]
    then
        fslmaths ${tmpdir}/${curr_vol} -s `sigma2fwhm $sm_fwhm`  ${tmpdir}/${curr_vol}
    fi

    # create a weighning mask for the current input
    if [ $do_inmask -eq 1 ]
    then
        case $inmask in
            thr)    fslmaths ${tmpdir}/${curr_vol} -thrp $mask_thr $inweight
                    ;;
            bet)    bet ${tmpdir}/${curr_vol} ${tmpdir}/${curr_vol}_bet -o -m $betpar -R
                    ;;
            *)      echo "ERROR: Unknown option <$inmask> for input weightning!"
                    exit
                    ;;
        esac
    fi
done
echo " - done"

#----------------------------------------------------------------------#
# run flirt on each volume
#mkdir ${tmpdir}ov

Fref=$reffl

for i in $(seq $numiter)
do
    echo ""
    echo "Iteration #$i:"
    echo "working on volume:"
    mkdir ${tmpdir}/${outnm}_itr${i}.mat

    mc_lst=""
    matlst=""
    cnt=0

    for curr_vol in $vol_lst
    do
        cnt=$(($cnt+1))
        echo -n "$cnt "

        curr_vol=`remove_ext ${curr_vol}`
        curr_vol=`basename ${curr_vol}`

        if [ $i -eq 1 ]
        then
            init_par=""
        else
            preitr=$(($i-1))
            init_par="-init ${tmpdir}/${outnm}_itr${preitr}.mat/${curr_vol}"
        fi

        if [ $do_inmask -eq 1 ]
        then
            inmaskstr="-inweight ${tmpdir}/${curr_vol}_bet_mask"
        else
            inmaskstr=""
        fi

        flirt -in ${tmpdir}/${curr_vol} -ref $Fref -omat ${tmpdir}/${outnm}_itr${i}.mat/${curr_vol} $flirt_fun_par $init_par $inmaskstr

        if [ $do_rsmpl -eq 1 ]
        then
            flirt -in ${tmpdir}/${curr_vol} -ref $reffl -o ${tmpdir}/mc_${curr_vol}_itr${i} -init ${tmpdir}/${outnm}_itr${i}.mat/${curr_vol} -applyxfm $trans_fun_par
        else
            flirt -in ${tmpdir}/${curr_vol} -ref ${tmpdir}/${curr_vol} -o ${tmpdir}/mc_${curr_vol}_itr${i} -init ${tmpdir}/${outnm}_itr${i}.mat/${curr_vol} -applyxfm $trans_fun_par
        fi

        mc_lst="$mc_lst ${tmpdir}/mc_${curr_vol}_itr${i}"
        matlst="$matlst ${tmpdir}/${outnm}_itr${i}.mat/${curr_vol}"
    done
    echo " - done"

    fslmerge -t ${tmpdir}/${outnm}_itr${i} $mc_lst
    fslmaths    ${tmpdir}/${outnm}_itr${i} -Tmean ${tmpdir}/${outnm}_itr${i}_mean

    bet ${tmpdir}/${outnm}_itr${i}_mean ${tmpdir}/${outnm}_itr${i}_mean_bet -o -m $betpar -R
    imcp ${tmpdir}/${outnm}_itr${i}_mean_bet_mask $refweight
    Fref=${tmpdir}/${outnm}_itr${i}_mean
done

echo " - done"
echo ""

#----------------------------------------------------------------------#
if [ $do_final -eq 1 ]
then
    echo "Perform a final co-registration to the reference image"

    flirt_fun_par="-dof $dof -usesqform -cost $costfun -searchcost $costfun"
    flirt_fun_par="$flirt_fun_par -nosearch -coarsesearch 30 -finesearch 6"
    if [ $do_refmask -eq 1 ]
    then
        flirt_fun_par="$flirt_fun_par -refweight ${tmpdir}/refmask"
    fi
    flirt_fun_par="$flirt_fun_par -inweight ${tmpdir}/${outnm}_itr${i}_mean_bet_mask"

    flirt -in ${tmpdir}/${outnm}_itr${i}_mean -ref $reffl -omat $tmpdir/final_mean.mat $flirt_fun_par

    declare -a vols=($vol_lst)
    cnt=0
    mc_lst=""
    for curr_mat in $matlst
    do
        cvol=`basename ${vols[$cnt]}`

        echo "$cnt    $cvol    $curr_mat    mc2_$cvol"
        convert_xfm -omat $curr_mat -concat $curr_mat $tmpdir/final_mean.mat

        flirt -in $tmpdir/$cvol -ref ${tmpdir}/${outnm}_itr${i}_mean -o $tmpdir/mc2_$cvol -init $curr_mat  -applyxfm $trans_fun_par

        cnt=$(($cnt+1))

        mc_lst="$mc_lst $tmpdir/mc2_$cvol"
    done
fi

#----------------------------------------------------------------------#
fslmerge -t ${outnm} $mc_lst
mv ${tmpdir}/${outnm}_itr${i}.mat/* ${outnm}.mat/

fsl_mcpar $outnm.mat -corr -out ${outnm}.par

#----------------------------------------------------------------------#
if [ $keep_tmp -eq 0 ]
then
    rm -r $tmpdir
fi
