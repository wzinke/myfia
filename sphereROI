#!/bin/bash
#
# sphereROI
#
# created: 21.07.2013
# by zinke
#

# TODO: Add image transformations by adding a target image file and
#       optional a transformation matrix with std2imgcoord

Usage() {
cat << EOF

    Usage: $0 <coor> <radius> [options]

        create a spherical ROI with given radius centered at the voxel
        specified by coor as 'x y z'
        If radius is 0, only a single voxel is selected.

        see: https://www.jiscmail.ac.uk/cgi-bin/webadmin?A2=FSL;6ce4bff3.1301

    OPTIONS:
            -ref    reference image
                    (default: "$FSLDIR/data/standard/MNI152_T1_2mm_brain")
            -trgt   target image space if transformation is required
            -o      output file name
            -mm     input coordinates are in mm, not voxel
            -warp   warp field to get center into functional space
            -mat    transformation matrix to get center into functional space
            -premat pre-warp transformation matrix
            -f      speed up the process (use -fmean instead of -dilF)
            -p      create png image showing the ROI location

            ###########################################################
            ##   (c) wolf zinke (2013) - part of the MaFIA toolbox   ##
            ##         > MAcaque Functional Image Analysis <         ##
            ##            Licensed under the MIT license             ##
            ###########################################################


EOF
exit 1

}

if [ $# -lt 4 ]
then
    Usage
else
    coorX=$1
    coorY=$2
    coorZ=$3
    radius=$4
    shift 4
fi

#__________________________________________________________________________________________#

do_mean=0
onm=ROIsphere_X${coorX}Y${coorY}Z${coorZ}
refimg=$FSLDIR/data/standard/MNI152_T1_2mm_brain
otstr="-odt char"
krnlstr="-dilF"

do_mm=0
do_plot=0
do_trans=0
transstr=""
got_trgt=0
dimstr="-vox"

tmpdir=`tmpnam tmpSphere`
rm $tmpdir
mkdir $tmpdir;

while [ $# -gt 0 ] ;
do
    case $1 in
          -o)   onm=$2
                shift 2
                ;;
          -f)   do_mean=1
                otstr=""
                krnlstr="-fmean"
                shift
                ;;
        -ref)   refimg=$2
                shift 2
                ;;
       -trgt)   trgtimg=$2
                got_trgt=1
                shift 2
                ;;
         -mm)   do_mm=1
                dimstr="-mm"
                shift
                ;;
        -mat)   transstr="$transstr -xfm $2"
                do_trans=1
                shift 2
                ;;
       -warp)   transstr="$transstr -warp $2"
                do_trans=1
                shift 2
                ;;
     -premat)   transstr="$transstr -premat $2"
                do_trans=1
                shift 2
                ;;
          -p)   do_plot=1
                shift
                ;;
           -*)   echo "Wrong option: <$1>"
                echo ""
                Usage
                ;;
           *)   break
                ;;
    esac
done

#__________________________________________________________________________________________#


vc="${coorX} ${coorY} ${coorZ}"

if [ $do_mm -eq 1 ]
then
    vc=$(echo "${coorX} ${coorY} ${coorZ}" | std2imgcoord -img $refimg -std $refimg -vox -)

    echo "ROI centered at Voxel: $vc"
fi


if [ $do_trans -eq 1 ]
then
    if [ $got_trgt -eq 1 ]
    then
        echo "${vc}" > $tmpdir/coor
        vc=$(img2imgcoord -src $refimg -dest $trgtimg $transstr $dimstr $tmpdir/coor)
    else
        vc=$(echo "${vc}" | std2imgcoord -img $refimg $transstr $dimstr -)
    fi
elif [ $do_mm -eq 1 ]
then
    vc=$(echo "${vc}" | std2imgcoord -img $refimg -std $refimg -vox -)
fi

coorX=$(echo "$vc" | sed -e 's/   / /g' | sed -e 's/  / /g' | cut -d' ' -f1 | xargs printf "%1.0f")
coorY=$(echo "$vc" | sed -e 's/   / /g' | sed -e 's/  / /g' | cut -d' ' -f2 | xargs printf "%1.0f")
coorZ=$(echo "$vc" | sed -e 's/   / /g' | sed -e 's/  / /g' | cut -d' ' -f3 | xargs printf "%1.0f")

if [ $got_trgt -eq 0 ]
then
    trgtimg=$refimg
fi

if [ $radius -gt 0 ]
then
    expstr=" -kernel sphere $radius $krnlstr"
else
    expstr=""
fi

fslmaths $refimg -mul 0 -add 1 -roi ${coorX} 1 ${coorY} 1 ${coorZ} 1 0 1 $expstr $onm $otstr

if [ $do_mean -eq 1 ]
then
    thresh=$(fslstats $onm -p 100)
    thresh=$(echo "$thresh / 2" | bc -l)
    fslmaths $onm -thr $thresh -bin $onm -odt char
fi

if [ $do_plot -eq 1 ]
then
    vol_slicer $trgtimg -stat $onm -thick -s 2 -cog -statrng 0.5 4 -out $onm.png
fi


rm -r $tmpdir
