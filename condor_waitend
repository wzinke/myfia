#!/bin/bash
#
# condor_waitend
#
# created: 28.03.2012
# by zinke
#

Usage() {
cat << EOF

    Usage: $0 <submit_file> [options]

    OPTIONS:
            -itv    time interval to check for remaining jobs (default: 1)
            -loc    run jobs locally
            -nproc  number of processors claimed for local processing (default: 1)
            -go     do not wait until all jobs are completed

            ###########################################################
            ##   (c) wolf zinke (2012) - part of the MaFIA toolbox   ##
            ##         > MAcaque Functional Image Analysis <         ##
            ##            Licensed under the MIT license             ##
            ###########################################################

EOF
exit 1

}


if [ $# -lt 1 ]; then
    Usage
else
    sbmfl=$1
#     if [ $(echo $OSTYPE | grep linux | wc -w) -eq 0 ]
#     then
#         tmpfl=$(tmpnam /tmp/MacSubmit)
# #         iconv --from-code=UTF-8 --to-code=MAC $sbmfl
#         awk '{ gsub("\r", "\n"); print $0;}' $sbmfl > $sbmfl
# #       tr '\n' '\r' < $sbmfl > $tmpfl
#     fi

    shift
fi

#__________________________________________________________________________________________#
itv=1
runloc=0
nprocs=-1
waitend=1

while [ $# -gt 0 ] ;
do
    case $1 in
        -itv)   itv=$2
                shift 2
                ;;
        -loc)   runloc=1
                shift
                ;;
         -go)   waitend=0
                shift
                ;;
      -nproc)   nprocs=$2
                runloc=1
                shift 2
                ;;
          -*)   echo "Wrong option: <$1>"
                echo ""
                Usage
                ;;
           *)   break
                ;;
    esac
done

if [ $nprocs -eq -1 ]
then
    nprocs=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu)
fi

#__________________________________________________________________________________________#

for csub in $sbmfl
do
    if [ ! -e $csub ]
    then
        echo "ERROR: Submit file $csub not found!"
        exit
    fi
done

SECONDS=0
TotSec=0

cnt=0
for csub in $sbmfl
do
    echo ">> Processing: $csub"

    SECONDS=0
    cnt=$(($cnt+1))

    if [ $runloc -eq 0 ]
    then
            jid=$(condor_submit $csub)
            echo "$jid"

            prid=$(echo "$jid" | cut -d. -f1 | cut -d' ' -f6)

        if [ $waitend -eq 1 ]
        then
            echo "Waiting for Condor Job Cluster $prid to be completed..."

            procrun=1
            while [ $procrun -gt 0 ]
            do
                if [ $(condor_q | tail -1 | cut -d' ' -f2 | cut -d';' -f1) == 'jobs' ]
                then
                    procrun=0
                    for cprid in $prid
                    do
                        cprocrun=$(condor_q  | grep $cprid | wc -l)
                        procrun=$(($procrun+$cprocrun));
                    done

                    if [ $procrun -eq 0 ]
                    then
                        break
                    fi
                fi
                sleep $itv
            done
        fi
    else   # run local
        initdir=$(pwd)
        cdir=$initdir
        jobstr=""
        jobcnt=0
        waitend=1

        numjobs=$(cat $csub | grep Queue | wc -l)

        while read cstr
        do
            if [ "$cstr" == "Queue" ]  # execute command and check number of running processes
            then
                cd $cdir

                eval "$ccmd $carg" &
                pid=$!
                jobcnt=$(($jobcnt+1))
                jobstr="$jobstr $pid"

                echo -n "$jobcnt/$numjobs ... "

                while [ $(echo "$jobstr" | wc -w) -ge $nprocs ]
                do
                    sleep $itv

                    tstpid=$jobstr
                    jobstr=""
                    for cpid in $tstpid
                    do
                        if ps -p $cpid > /dev/null
                        then
                            jobstr="$jobstr $cpid"
                        fi
                    done
                done

            else # check for relevant keywords
#                if [ "$(uname)" == "Darwin" ]  # seems like sed has different behaviour depending on OS
#                then
                    cID=$(   echo $cstr | cut -d= -f1  | awk '{gsub(/^ +| +$/,"")} {print $0}')
                    cvalue=$(echo $cstr | cut -d= -f2- | sed -e 's/\"//g' | awk '{gsub(/^ +| +$/,"")} {print $0}')
#                elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]
#                then
#                    cID=$(   echo $cstr | cut -d= -f1   | sed -e 's/^[ \t]*//;s/[ \t]*$//')
#                    cvalue=$(echo $cstr | cut -d= -f2- | sed -e 's/\"//g'   | sed -e 's/^[ \t]*//;s/[ \t]*$//')
#                fi


                case "$cID" in
                    "request_cpus")  reqcpu="$cvalue"
                                     nprocs=$(echo "($nprocs / $reqcpu) + 0.5" | bc -l | xargs printf "%1.0f")
                                     echo "Using $nprocs threads."
                                     ;;
                    "Executable")    ccmd="$cvalue"
                                     echo "executing command $ccmd"
                                     ;;
                    "arguments")     carg="$cvalue"
                                     ;;
                    "initialdir")    cdir="$cvalue"
                                     ;;
                esac
            fi
        done < $csub

        while [ $(echo $jobstr | wc -w) -gt 0 ]
        do
            sleep $itv

            tstpid=$jobstr
            jobstr=""
            for cpid in $tstpid
            do
                if ps -p $cpid > /dev/null
                then
                    jobstr="$jobstr $cpid"
                fi
            done
        done
        cd $initdir
    fi
    echo "done"

    if [ $waitend -eq 1 ]
    then
        usedtime=$(printf ""%dh:%dm:%ds"\n" $(($SECONDS/3600)) $(($SECONDS%3600/60)) $(($SECONDS%60)))
        echo "... that took about $usedtime to complete $sbmfl (p/m $itv s)"
        echo " "
    fi

    TotSec=$(($TotSec+$SECONDS))
done

if [ $cnt -gt 1 -a $waitend -eq 1  ]
then
    usedtime=$(printf ""%dh:%dm:%ds"\n" $(($TotSec/3600)) $(($TotSec%3600/60)) $(($TotSec%60)))
    echo "... total processing time of $cnt submit fileswas about $usedtime (p/m $itv s)"
    echo " "
fi

