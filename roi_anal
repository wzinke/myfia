#!/bin/bash
#
# roi_anal
#
# created: 02.09.2013
# by zinke
#

Usage() {
cat << EOF

    Usage: $0 <featdir> <roi> <copelist> [options]

        extract statistical values of specified cope files for a defined ROI
        <copelist> is a list of numbers identifying the copes (e.g. "4 5 8 9")

    OPTIONS:
            -odir    <basename>   output directory (default: roi name)
            -dirpath <dirname>    root output directory (default: <featdir>)
            -thr     <thr>        use only voxel above this absolute threshold
            -thrP    <thr%>       use only voxel above this relative threshold
            -thrmask <thr>        use this mask to select voxels within the ROI
            -mthr    <thr>        threshold the ROI mask at this absolute value.
            -perc                 convert to percent signal change (whatever this is, NIY!)
            -mat     <matfl>      use this transformation matrix\warpfield
            -imat    <matfl>      Invert this transformation matrix\warpfield
            -bck     <bckimg>     background image for ROI
            -mni                  ROI is defined in MNI space
            -subj                 use the highres transformations instead of standard
            -nt                   do not apply coordinate transformation (to safe time)
            -w                    calculate weighted mean
            -pfx <pfxhd> <pfxln>  print this string prior the roi statistics
            -keep                 don't delete temporary files when finished

    does not allow for roi weighting in the current form

            ###########################################################
            ##   (c) wolf zinke (2013) - part of the MaFIA toolbox   ##
            ##         > MAcaque Functional Image Analysis <         ##
            ##            Licensed under the MIT license             ##
            ###########################################################

EOF
exit 1

}

# TODO: check if coordinate transform works with a single img2stdcoord call by using a file with coordinates
# TODO: implement percent transformation
# TODO: add ts_plot
# TODO: option to use premat with warp field
# TODO: create summary plots/statistics with R?

if [ $# -lt 3 ]; then
    Usage
else
    featdir="$(dirname $(readlink -f $1))/$(basename $(readlink -f $1))"
    inmask="$2"
    copelst="$3"
    shift 3
fi

if [ ! -e ${featdir} ]
then
    echo "ERROR: Feat direct does not exist!"
    echo "       ${featdir}"
    exit 0
elif [ $(imtest ${featdir}/example_func) -ne 1 ]
then
    echo "ERROR: Something wrong here, example_func not found!"
    echo "       ${featdir}/example_func"
    exit 0
fi

if [ $(imtest $inmask) -ne 1 ]
then
    echo "ERROR: ROI mask not found!"
    echo "       $inmask"
    exit 0
fi

#__________________________________________________________________________________________#
chkthr() {
    if [ $1 -eq 1 ]
    then
        echo "Only one threshold option can be used, all subsequent uses are ignored!"
        return 0
    else
        return 1
    fi
}

tmpdir=`tmpnam tmp_roianal`
rm $tmpdir
mkdir $tmpdir

roinm=$(remove_ext $inmask)
roinm=$(basename $roinm)

odir=$roinm
dirpath=${featdir}

got_thr=0
do_perc=0
do_back=0
do_mni=0
do_trans=1
get_mat=1
do_inv=0
mthrstr=""
thropt="0"
thrval=0
keep_tmp=0

prestr=""
prehd=""
mnistr=""
wstr=""

reftrans="standard"

while [ $# -gt 0 ] ;
do
    case $1 in
       -odir)   odir=$2
                shift 2
                ;;
    -dirpath)   dirpath=$2
                shift 2
                ;;
        -thr)   if [ $got_thr -eq 1 ]
                then
                    echo "Only one threshold option can be used, all subsequent uses are ignored!"
                    return 0
                else
                    got_thr=1
                    thropt="a"
                    thrval=$2
                fi
                shift 2
                ;;
       -thrP)   if [ $got_thr -eq 1 ]
                then
                    echo "Only one threshold option can be used, all subsequent uses are ignored!"
                    return 0
                else
                    got_thr=1
                    thropt="p"
                    thrval=$2
                fi
                shift 2
                ;;
    -thrmask)   if [ $got_thr -eq 1 ]
                then
                    echo "Only one threshold option can be used, all subsequent uses are ignored!"
                    return 0
                else
                    got_thr=1
                    thropt="m"
                    thrval=$2
                fi
                shift 2
                ;;
        -mthr)  mthrstr="-thr $2"
                shift 2
                ;;
         -mat)  get_mat=0
                matfl=$2
                shift 2
                ;;
        -imat)  get_mat=0
                do_inv=1
                matfl=$2
                shift 2
                ;;
         -bck)  do_back=1
                bckimg=$2
                shift 2
                ;;
         -mni)  if [ $do_back -eq 0 ]
                then
                    bckimg=$FSLDIR/data/standard/MNI152_T1_2mm_brain
                fi
                do_back=1
                do_mni=1
                shift
                ;;
        -subj)  reftrans="highres"
                shift
                ;;
          -nt)  do_trans=0
                shift
                ;;
           -w)  wstr="-w"
                ;;
        -perc)  do_perc=1
                echo "WARNING: scaling to PSC not implemented yet, option ignored!"
                shift
                ;;
        -pfx)   prestr="$3"
                prehd="$2"
                shift 3
                ;;
        -keep)  keep_tmp=1
                echo "tmp dir: $tmpdir"
                shift
                ;;
          -*)   echo "Wrong option: <$1>"
                echo ""
                Usage
                ;;
           *)   break
                ;;
    esac
done

fslmaths $inmask $mthrstr -bin $tmpdir/roi
roi=$tmpdir/roi

fodir=$dirpath/$odir

mkdir -p $fodir

#__________________________________________________________________________________________#
# roi transform

# get the transformation
if [ $get_mat -eq 1 ]
then
    if [ $(imtest ${featdir}/reg/${reftrans}2example_func_warp) -eq 1 ]
    then
        matfl=${featdir}/reg/${reftrans}2example_func_warp
    elif [ $(imtest ${featdir}/reg/example_func2${reftrans}_warp) -eq 1 ]
    then
        invwarp -w ${featdir}/reg/example_func2${reftrans}_warp -o ${featdir}/reg/${reftrans}2example_func_warp -r ${featdir}/reg/example_func
        matfl=${featdir}/reg/${reftrans}2example_func_warp
    elif [ -e ${featdir}/reg/${reftrans}2example_func.mat ]
    then
        matfl=${featdir}/reg/${reftrans}2example_func.mat
    else
        echo "ERROR: No transformation to ${reftrans} found in this directory!"
        echo "       ${featdir}/reg"
        exit 0
    fi
elif [ $do_inv -eq 1 ]
then
    if [ $(imtest $matfl) -eq 1 ]
    then
        invwarp -w $matfl -o $tmpdir/matfl -r ${featdir}/example_func
    else
        convert_xfm -omat $tmpdir/matfl -inverse $matfl
    fi
    matfl=$tmpdir/matfl
fi

# transform roi mask into native space

# apply slight smoothing to avoid loss of voxels
# if [ "$(fslval $roi pixdim1)" -lt "$(fslval $roi pixdim3)" ]  # assume isometric inplane resolution
# then
#     vxlsz=$(fslval $roi pixdim3)
# else
#     vxlsz=$(fslval $roi pixdim1)
# fi

vxlsz=$(octcalc "median([$(fslval ${featdir}/example_func pixdim1), $(fslval ${featdir}/example_func pixdim2), $(fslval ${featdir}/example_func pixdim3)])")

fslmaths $roi -s $(fwhm2sigma $vxlsz) $tmpdir/smroi

if [ $thropt == 'm' ]
then
    fslmaths $thrval -s $(fwhm2sigma $vxlsz) $tmpdir/thrmask
fi

if [ $(imtest $matfl) -eq 1 ]
then
    applywarp --ref=${featdir}/example_func --in=$tmpdir/smroi --out=$fodir/roi --warp=$matfl --interp=trilinear
    invwarp -w $matfl -o $tmpdir/invmat -r $roi
    imcp $matfl $fodir/invmat
    imcp $matfl $fodir/matfl

    if [ $thropt == 'm' ]
    then
        applywarp --ref=${featdir}/example_func --in=$tmpdir/thrmask --out=$fodir/roithrmask --warp=$matfl --interp=trilinear
    fi
else
    flirt -in $tmpdir/smroi -ref ${featdir}/example_func -out $fodir/roi -applyxfm -init $matfl -interp trilinear
    convert_xfm -omat $tmpdir/invmat -inverse $matfl
    cp $matfl $fodir/invmat
    cp $matfl $fodir/matfl

    if [ $thropt == 'm' ]
    then
        flirt -in $tmpdir/thrmask -ref ${featdir}/example_func -out $fodir/roithrmask -applyxfm -init $matfl -interp trilinear -interp trilinear
    fi
fi
imatfl=$tmpdir/invmat

fslmaths $fodir/roi -thr 0.2 -bin -mul ${featdir}/mask $fodir/roithr

if [ $thropt == 'm' ]
then
    fslmaths $fodir/roithrmask -thr 0.2 -bin $fodir/roithrmask
    fslmaths $fodir/roithrmask -mul 2 -add $fodir/roi $tmpdir/plotroi_func
    plroiF="$tmpdir/plotroi_func"

    if [ $do_back -eq 1 ]
    then
        fslmaths $thrval -mul 2 -add $roi $tmpdir/plotroi
        plroi="$tmpdir/plotroi"
    fi
else
    plroiF="$fodir/roi"
    plroi="$roi"
fi

immv $fodir/roithr $fodir/roi

# create images representing the ROI in functional and reference space
vol_slicer ${featdir}/example_func -stat $plroiF -thick -s 2 -cog -statrng 0.75 2.5 -out $fodir/roi.png

if [ $do_back -eq 1 ]
then
    vol_slicer $bckimg -stat $plroi -thick -s 2 -cog -statrng 0.75 2.5 -out $fodir/roi_hr.png
    chkreg ${featdir}/example_func $bckimg $imatfl  $fodir/reg_check.png
fi

fslmeants -i ${featdir}/filtered_func_data  -m $fodir/roi -o $fodir/roi_ts.txt

roivxl=$(fslstats $fodir/roi -V | awk '{print $1}')

#__________________________________________________________________________________________#
echo -n "$prehd  copenum  copename  voxels  volume" > $fodir/roi_tbl.dat
echo -n "  C_mean  C_std  C_min  C_max  C_10  C_median  C_90  C_max_x  C_max_y  C_max_z" >> $fodir/roi_tbl.dat
echo -n "  P_mean  P_std  P_min  P_max  P_10  P_median  P_90  P_max_x  P_max_y  P_max_z" >> $fodir/roi_tbl.dat
echo -n "  Z_mean  Z_std  Z_min  Z_max  Z_10  Z_median  Z_90  Z_max_x  Z_max_y  Z_max_z" >> $fodir/roi_tbl.dat

if [ $do_mni -eq 1 ]
then
    echo -n "  C_max_x_MNI  C_max_y_MNI  C_max_z_MNI" >> $fodir/roi_tbl.dat
    echo -n "  P_max_x_MNI  P_max_y_MNI  P_max_z_MNI" >> $fodir/roi_tbl.dat
    echo -n "  Z_max_x_MNI  Z_max_y_MNI  Z_max_z_MNI" >> $fodir/roi_tbl.dat

    if [ $do_trans -eq 1 ]
    then
        mnistr="MNI_X MNI_X MNI_X"
    fi
fi

echo ""  >> $fodir/roi_tbl.dat

for ccope in $copelst
do
    cnm=$(cat ${featdir}/design.con | grep /ContrastName$ccope | head -1 | cut -f2 | sed -e 's/^ *//g' -e 's/ *$//g' -e 's/[ ]/_/g' -e 's/:/_/g')

    # get cope name for output table
    thrstr=""
    if [ $thropt == "0" ]
    then
        cmask="$fodir/roi"
    elif [ $thropt == 'm' ]
    then
#         fslmaths $fodir/roi -mas $fodir/roithrmask -bin $fodir/cope${ccope}_mask -odt char
        cmask="$fodir/roithrmask"
    else
        case $thropt in
            "a")  cthr=$thrval
                  ;;
            "p")  cthr=$(fslstats ${featdir}/stats/zstat${ccope} -k $fodir/roi -P $thrval)
                  ;;
        esac
        fslmaths ${featdir}/stats/zstat${ccope} -mas $fodir/roi -thr $cthr -bin $fodir/cope${ccope}_mask
        cmask="$fodir/cope${ccope}_mask"

        vol_slicer ${featdir}/example_func -stat $cmask -thick -s 2 -cog -statrng 0.5 4 -out $fodir/roi_cope${ccope}.png
        if [ $do_back -eq 1 ]
        then
            vol_slicer $bckimg -stat $cmask -thick -s 2 -cog -statrng 0.5 4 -out $fodir/roi_cope${ccope}_hr.png -mat $imatfl
        fi
    fi

    numvxl=$(fslstats $cmask -V | awk '{print $1}')
#     num10perc=$(echo "0.9*$numvxl" | bc -l | xargs printf "%1.0f")

    fslmeants -i ${featdir}/stats/cope${ccope}  -m $cmask --showall --transpose $wstr -o $tmpdir/cope${ccope}_all.dat
    fslmeants -i ${featdir}/stats/zstat${ccope} -m $cmask --showall --transpose $wstr -o $tmpdir/zstat${ccope}_all.dat
    fslmeants -i ${featdir}/stats/pe${ccope}    -m $cmask --showall --transpose $wstr -o $tmpdir/pe${ccope}_all.dat

    declare -a cvals=($(cat $tmpdir/cope${ccope}_all.dat   | awk '{print $4}'))
    declare -a pvals=($(cat $tmpdir/pe${ccope}_all.dat     | awk '{print $4}'))
    declare -a zvals=($(cat $tmpdir/zstat${ccope}_all.dat  | awk '{print $4}'))
    declare -a xcoor=($(cat $tmpdir/zstat${ccope}_all.dat  | awk '{print $1}'))
    declare -a ycoor=($(cat $tmpdir/zstat${ccope}_all.dat  | awk '{print $2}'))
    declare -a zcoor=($(cat $tmpdir/zstat${ccope}_all.dat  | awk '{print $3}'))

    echo "$prehd  copenum  copename zstat cope pe func_X func_Y func_Z VXL_ID $mnistr" > $fodir/cope${ccope}_vxl_tbl.dat
    mnicoor=""
    for cvxl in $(seq 0 $(($numvxl-1)) )
    do
        if [ $(($do_mni+$do_trans)) -eq 2 ]
        then
            if [ $(imtest $imatfl) -eq 1 ]
            then
                mnicoor="$(echo "${xcoor[$cvxl]} ${ycoor[$cvxl]} ${zcoor[$cvxl]}" | img2stdcoord -img ${featdir}/example_func -std $bckimg -warp $imatfl -vox -)"
            else
                mnicoor="$(echo "${xcoor[$cvxl]} ${ycoor[$cvxl]} ${zcoor[$cvxl]}" | img2stdcoord -img ${featdir}/example_func -std $bckimg -xfm $imatfl -vox -)"
            fi
        fi
        echo "$prestr $ccope $cnm ${zvals[$cvxl]} ${cvals[$cvxl]} ${pvals[$cvxl]} ${xcoor[$cvxl]} ${ycoor[$cvxl]} ${zcoor[$cvxl]} ${xcoor[$cvxl]}_${ycoor[$cvxl]}_${zcoor[$cvxl]} $mnicoor" >> $fodir/cope${ccope}_vxl_tbl.dat
    done

    echo -n "$prestr $ccope $cnm" >> $fodir/roi_tbl.dat
    echo -n "  $(fslstats ${featdir}/stats/cope${ccope}  -k $cmask -v -m -s -R -p 10 -p 50 -p 90 -x)" >> $fodir/roi_tbl.dat
    echo -n "  $(fslstats ${featdir}/stats/pe${ccope}    -k $cmask -m -s -R -p 10 -p 50 -p 90 -x)" >> $fodir/roi_tbl.dat
    echo -n "  $(fslstats ${featdir}/stats/zstat${ccope} -k $cmask -m -s -R -p 10 -p 50 -p 90 -x)" >> $fodir/roi_tbl.dat

    if [ $do_mni -eq 1 ]
    then
        if [ $(imtest $matfl) -eq 1 ]
        then
            echo -n "  $(fslstats ${featdir}/stats/cope${ccope}  -k $cmask -x | img2stdcoord -img ${featdir}/example_func -std $bckimg -warp $imatfl -vox -)" >> $fodir/roi_tbl.dat
            echo -n "  $(fslstats ${featdir}/stats/pe${ccope}  -k $cmask -x | img2stdcoord -img ${featdir}/example_func -std $bckimg -warp $imatfl -vox -)" >> $fodir/roi_tbl.dat
            echo -n "  $(fslstats ${featdir}/stats/zstat${ccope}  -k $cmask -x | img2stdcoord -img ${featdir}/example_func -std $bckimg -warp $imatfl -vox -)" >> $fodir/roi_tbl.dat
        else
            echo -n "  $(fslstats ${featdir}/stats/cope${ccope}  -k $cmask -x | img2stdcoord -img ${featdir}/example_func -std $bckimg -xfm $imatfl -vox -)" >> $fodir/roi_tbl.dat
            echo -n "  $(fslstats ${featdir}/stats/pe${ccope}  -k $cmask -x | img2stdcoord -img ${featdir}/example_func -std $bckimg -xfm $imatfl -vox -)" >> $fodir/roi_tbl.dat
            echo -n "  $(fslstats ${featdir}/stats/zstat${ccope}  -k $cmask -x | img2stdcoord -img ${featdir}/example_func -std $bckimg -xfm $imatfl -vox -)" >> $fodir/roi_tbl.dat
        fi
    fi
    echo ""  >> $fodir/roi_tbl.dat
done

#__________________________________________________________________________________________#
if [ $keep_tmp -eq 0 ]
then
    rm -r $tmpdir
fi
